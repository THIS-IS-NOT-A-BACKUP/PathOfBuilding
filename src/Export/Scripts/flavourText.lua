--
-- export flavour text data
--
local function normalizeId(id)
	id = tostring(id)
	-- remove trailing underscores only. We can't match Hash sadly.
	return id:gsub("_+$", "")
end

local function cleanAndSplit(str)
	-- Normalize newlines
	str = str:gsub("\r\n", "\n")

	local lines = {}
	for line in str:gmatch("[^\n]+") do
		line = line:match("^%s*(.-)%s*$") -- trim each line
		if line ~= "" then
			-- Escape quotes
			line = line:gsub('"', '\\"')
			table.insert(lines, line)
		end
	end

	return lines
end

local uniqueNameLookup = {}
local unmatchedIds = {}
local exportedNames = {}

-- List of forced names (multiple entries for same ID allowed)
local forcedNameList = {
	{ id = "UniqueOneHandAxe5", name = "Jack, the Axe" },
	{ id = "UniqueBootsDIY", name = "Doryani's Delusion" },
	{ id = "UniqueGlovesStrDex9", name = "Tombfist" },
	{ id = "UniqueAmulet45", name = "Impresence" },
	{ id = "UniqueAmuletVictor1", name = "Talisman of the Victor" },
	{ id = "UniqueStaff8", name = "Agnerod South" },
	{ id = "UniqueStaff8", name = "Agnerod North" },
	{ id = "UniqueStaff8", name = "Agnerod West" },
	{ id = "Ring11", name = "Gifts from Above" },
	{ id = "Ring12", name = "Death Rush" },
	{ id = "Ring13", name = "Shavronne's Revelation" },
	{ id = "Belt5", name = "Auxium" },
	{ id = "Amulet13", name = "Daresso's Salute" },
	{ id = "Amulet14", name = "Voll's Devotion" },
	{ id = "Amulet15", name = "Victario's Acuity" },
	{ id = "UniqueAmulet27", name = "Star of Wraeclast" },
	{ id = "UniqueAmulet29x", name = "Replica Winterheart" },
	{ id = "UniqueJewel82x", name = "Replica Primordial Might" },
	{ id = "UniqueBootsDex10", name = "Abberath's Hooves" },
	{ id = "UniqueRing54", name = "Precursor's Emblem" },
	{ id = "UniqueHelmetStrInt11", name = "Lightpoacher" },
	{ id = "UniqueBootsDexInt6", name = "Bubonic Trail" },
	{ id = "UniqueBodyDexInt9", name = "Shroud of the Lightless" },
	{ id = "UniqueGlovesStrInt6", name = "Volkuur's Guidance" },
	{ id = "UniqueBootsAtlas1", name = "Beacon of Madness" },
	{ id = "UniqueBootsAtlas1", name = "Demigod's Eye" },
	{ id = "UniqueShieldDemigods", name = "Demigod's Beacon" },
	{ id = "UniqueBootsDemigods1", name = "Demigod's Stride" },
	{ id = "UniqueBeltDemigods1", name = "Demigod's Bounty" },
	{ id = "UniqueBodyDemigods", name = "Demigod's Dominance" },
	{ id = "UniqueHelmetDemigods1", name = "Demigod's Immortality" },
	{ id = "GraspingMailFlavourText", name = "Grasping Mail" },
	-- add more as needed
}

-- Build stash layout lookup
for row in dat("UniqueStashLayout"):Rows() do
	local name = row.WordsKey.Text2
	local id = normalizeId(row.ItemVisualIdentity.Id)
	if id:find("Map") or id:find("AlternateArt") or id:find("AtlasUpgrade") or id:find("HeistQuest") then
		goto continue
	end

	uniqueNameLookup[id] = name
	unmatchedIds[id] = name

	::continue::
end

-- Build FlavourText lookup
local flavourTextById = {}
for c in dat("FlavourText"):Rows() do
	local id = normalizeId(c.Id)
	flavourTextById[id] = cleanAndSplit(tostring(c.Text))
end

-- Open output file
local out = io.open("../Data/FlavourText.lua", "w")
out:write('-- This file is automatically generated, do not edit!\n')
out:write('-- Flavour text data (c) Grinding Gear Games\n\n')
out:write('return {\n')

local index = 1

-- Export forced names first
for _, entry in ipairs(forcedNameList) do
	-- We use Text2 because Words.Text has "The Immortan" instead of "The Road Warrior" in PoB2. In PoB, Text seems to have some names with leading spaces.
	local name = entry.name
	local id = entry.id
	local textLines = flavourTextById[id]

	if textLines then
		out:write('\t[', index, '] = {\n')
		out:write('\t\tid = "', id, '",\n')
		out:write('\t\tname = "', name, '",\n')
		out:write('\t\ttext = {\n')
		for _, line in ipairs(textLines) do
			out:write('\t\t\t"', line, '",\n')
		end
		out:write('\t\t},\n')
		out:write('\t},\n')
		index = index + 1

		-- Track exported names
		exportedNames[name] = true
		unmatchedIds[id] = nil
	end
end

-- Export remaining stash layout uniques
for id, name in pairs(uniqueNameLookup) do
	local lines = flavourTextById[id]
	if lines then
		out:write('\t[', index, '] = {\n')
		out:write('\t\tid = "', id, '",\n')
		out:write('\t\tname = "', name, '",\n')
		out:write('\t\ttext = {\n')
		for _, line in ipairs(lines) do
			out:write('\t\t\t"', line, '",\n')
		end
		out:write('\t\t},\n')
		out:write('\t},\n')
		index = index + 1

		exportedNames[name] = true
		unmatchedIds[id] = nil
	end
end

out:write('}\n')
out:close()

print("Flavour Texts exported.")

-- Print unmatched: only names never exported
print("Unique items from UniqueStashLayout without flavour text:")
for id, name in pairs(unmatchedIds) do
	if not exportedNames[name] then
		print(string.format("Id: %s, Name: %s", id, name))
	end
end
